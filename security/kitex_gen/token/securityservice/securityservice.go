// Code generated by Kitex v0.10.3. DO NOT EDIT.

package securityservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
	token "github.com/light-speak/lightdoor/security/kitex_gen/token"
	proto "google.golang.org/protobuf/proto"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"GetSecurityUserId": kitex.NewMethodInfo(
		getSecurityUserIdHandler,
		newGetSecurityUserIdArgs,
		newGetSecurityUserIdResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
	"GetSecurityToken": kitex.NewMethodInfo(
		getSecurityTokenHandler,
		newGetSecurityTokenArgs,
		newGetSecurityTokenResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingUnary),
	),
}

var (
	securityServiceServiceInfo                = NewServiceInfo()
	securityServiceServiceInfoForClient       = NewServiceInfoForClient()
	securityServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return securityServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return securityServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return securityServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "SecurityService"
	handlerType := (*token.SecurityService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "proto",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.10.3",
		Extra:           extra,
	}
	return svcInfo
}

func getSecurityUserIdHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(token.TokenRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(token.SecurityService).GetSecurityUserId(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetSecurityUserIdArgs:
		success, err := handler.(token.SecurityService).GetSecurityUserId(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetSecurityUserIdResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetSecurityUserIdArgs() interface{} {
	return &GetSecurityUserIdArgs{}
}

func newGetSecurityUserIdResult() interface{} {
	return &GetSecurityUserIdResult{}
}

type GetSecurityUserIdArgs struct {
	Req *token.TokenRequest
}

func (p *GetSecurityUserIdArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(token.TokenRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetSecurityUserIdArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetSecurityUserIdArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetSecurityUserIdArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetSecurityUserIdArgs) Unmarshal(in []byte) error {
	msg := new(token.TokenRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetSecurityUserIdArgs_Req_DEFAULT *token.TokenRequest

func (p *GetSecurityUserIdArgs) GetReq() *token.TokenRequest {
	if !p.IsSetReq() {
		return GetSecurityUserIdArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetSecurityUserIdArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetSecurityUserIdArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetSecurityUserIdResult struct {
	Success *token.TokenResponse
}

var GetSecurityUserIdResult_Success_DEFAULT *token.TokenResponse

func (p *GetSecurityUserIdResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(token.TokenResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetSecurityUserIdResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetSecurityUserIdResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetSecurityUserIdResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetSecurityUserIdResult) Unmarshal(in []byte) error {
	msg := new(token.TokenResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetSecurityUserIdResult) GetSuccess() *token.TokenResponse {
	if !p.IsSetSuccess() {
		return GetSecurityUserIdResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetSecurityUserIdResult) SetSuccess(x interface{}) {
	p.Success = x.(*token.TokenResponse)
}

func (p *GetSecurityUserIdResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetSecurityUserIdResult) GetResult() interface{} {
	return p.Success
}

func getSecurityTokenHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(token.UserIdRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(token.SecurityService).GetSecurityToken(ctx, req)
		if err != nil {
			return err
		}
		return st.SendMsg(resp)
	case *GetSecurityTokenArgs:
		success, err := handler.(token.SecurityService).GetSecurityToken(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*GetSecurityTokenResult)
		realResult.Success = success
		return nil
	default:
		return errInvalidMessageType
	}
}
func newGetSecurityTokenArgs() interface{} {
	return &GetSecurityTokenArgs{}
}

func newGetSecurityTokenResult() interface{} {
	return &GetSecurityTokenResult{}
}

type GetSecurityTokenArgs struct {
	Req *token.UserIdRequest
}

func (p *GetSecurityTokenArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(token.UserIdRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetSecurityTokenArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetSecurityTokenArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetSecurityTokenArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, nil
	}
	return proto.Marshal(p.Req)
}

func (p *GetSecurityTokenArgs) Unmarshal(in []byte) error {
	msg := new(token.UserIdRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

var GetSecurityTokenArgs_Req_DEFAULT *token.UserIdRequest

func (p *GetSecurityTokenArgs) GetReq() *token.UserIdRequest {
	if !p.IsSetReq() {
		return GetSecurityTokenArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetSecurityTokenArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetSecurityTokenArgs) GetFirstArgument() interface{} {
	return p.Req
}

type GetSecurityTokenResult struct {
	Success *token.TokenResponse
}

var GetSecurityTokenResult_Success_DEFAULT *token.TokenResponse

func (p *GetSecurityTokenResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(token.TokenResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetSecurityTokenResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetSecurityTokenResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetSecurityTokenResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, nil
	}
	return proto.Marshal(p.Success)
}

func (p *GetSecurityTokenResult) Unmarshal(in []byte) error {
	msg := new(token.TokenResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetSecurityTokenResult) GetSuccess() *token.TokenResponse {
	if !p.IsSetSuccess() {
		return GetSecurityTokenResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetSecurityTokenResult) SetSuccess(x interface{}) {
	p.Success = x.(*token.TokenResponse)
}

func (p *GetSecurityTokenResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetSecurityTokenResult) GetResult() interface{} {
	return p.Success
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) GetSecurityUserId(ctx context.Context, Req *token.TokenRequest) (r *token.TokenResponse, err error) {
	var _args GetSecurityUserIdArgs
	_args.Req = Req
	var _result GetSecurityUserIdResult
	if err = p.c.Call(ctx, "GetSecurityUserId", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetSecurityToken(ctx context.Context, Req *token.UserIdRequest) (r *token.TokenResponse, err error) {
	var _args GetSecurityTokenArgs
	_args.Req = Req
	var _result GetSecurityTokenResult
	if err = p.c.Call(ctx, "GetSecurityToken", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
